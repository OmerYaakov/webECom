<!DOCTYPE html>
<html data-bs-theme="auto" lang="he">

<%- include('partials/head') %>

<body>
<%- include('partials/nav') %>
<%- include('partials/components/adminorderscomp') %>
<div class="container">
    <div class="row">
        <div class="col-md-12 d-flex justify-content-center">
            <div id="chart"></div>

        </div>
    </div>
</div>

<script>
    // line does not work
    //  const margin = { top: 20, right: 20, bottom: 40, left: 40 };
    // const width = 800 - margin.left - margin.right;
    // const height = 400 - margin.top - margin.bottom;
    //
    // const svg = d3.select('#chart')
    //   .append('svg')
    //   .attr('width', width + margin.left + margin.right)
    //   .attr('height', height + margin.top + margin.bottom)
    //   .append('g')
    //   .attr('transform', `translate(${margin.left},${margin.top})`);
    //
    // // Make an AJAX call to retrieve data
    // fetch('/api/orders')
    //   .then(response => response.json())
    //   .then(data => {
    //     // Filter out entries with invalid totalPrice or dates
    //     const validData = data.filter(d =>
    //       typeof d.totalPrice === 'number' && !isNaN(d.totalPrice) && d.date !== null
    //     );
    //
    //     // Group the valid data by year and month, ignoring the day
    //     const aggregatedData = d3.rollups(
    //       validData,
    //       group => d3.sum(group, d => d.totalPrice),
    //       d => {
    //         if (d.date) {
    //           const yearMonth = d.date.substr(0, 7); // Extract "yyyy-MM"
    //           return new Date(Date.UTC(yearMonth.split('-')[0], parseInt(yearMonth.split('-')[1]) - 1));
    //         }
    //         return null; // Handle cases where date is missing
    //       },
    //       d3.timeMonth
    //     ).filter(([date]) => date !== null); // Filter out null dates
    //
    //     // Filter out NaN and non-numeric aggregated values
    //     const validAggregatedData = aggregatedData.filter(d => !isNaN(d[1]));
    //
    //     // Create scales for x and y axes
    //     const xScale = d3.scaleTime()
    //       .domain(d3.extent(validAggregatedData, d => d[0]))
    //       .range([0, width]);
    //
    //     const yMaxValue = d3.max(validAggregatedData, d => d[1]);
    //     const yScale = d3.scaleLinear()
    //       .domain([0, yMaxValue])
    //       .range([height, 0]);
    //
    //     // Create line generator
    //     const line = d3.line()
    //       .x(d => xScale(d[0]))
    //       .y(d => yScale(d[1]));
    //
    //     // Append the line to the SVG
    //     svg.append('path')
    //       .datum(validAggregatedData)
    //       .attr('class', 'line')
    //       .attr('d', line);
    //
    //     // Create x and y axes
    //     svg.append('g')
    //       .attr('class', 'x-axis')
    //       .attr('transform', `translate(0,${height})`)
    //       .call(d3.axisBottom(xScale));
    //
    //     svg.append('g')
    //       .attr('class', 'y-axis')
    //       .call(d3.axisLeft(yScale));
    //   })
    //   .catch(error => console.error(error));

    // bars
    // const margin = { top: 20, right: 20, bottom: 40, left: 40 };
    // const width = 800 - margin.left - margin.right;
    // const height = 400 - margin.top - margin.bottom;
    //
    // const svg = d3.select('#chart')
    //   .append('svg')
    //   .attr('width', width + margin.left + margin.right)
    //   .attr('height', height + margin.top + margin.bottom)
    //   .append('g')
    //   .attr('transform', `translate(${margin.left},${margin.top})`);
    //
    // // Make an AJAX call to retrieve data
    // fetch('/api/orders')
    //   .then(response => response.json())
    //   .then(data => {
    //     // Filter out entries with invalid totalPrice or dates
    //     const validData = data.filter(d =>
    //       typeof d.totalPrice === 'number' && !isNaN(d.totalPrice) && d.date !== null
    //     );
    //
    //     // Group the valid data by year and month, ignoring the day
    //     const aggregatedData = d3.rollups(
    //       validData,
    //       group => d3.sum(group, d => d.totalPrice),
    //       d => {
    //         if (d.date) {
    //           return new Date(d.date.slice(0, 7)); // Extract "yyyy-MM"
    //         }
    //         return null; // Handle cases where date is missing
    //       }
    //     ).filter(([date]) => date !== null); // Filter out null dates
    //
    //     // Filter out NaN and non-numeric aggregated values
    //     const validAggregatedData = aggregatedData.filter(d => !isNaN(d[1]));
    //
    //     // Create scales for x and y axes
    //     const xScale = d3.scaleTime()
    //       .domain(d3.extent(validAggregatedData, d => d[0]))
    //       .range([0, width]);
    //
    //     const yMaxValue = d3.max(validAggregatedData, d => d[1]);
    //     const yScale = d3.scaleLinear()
    //       .domain([0, yMaxValue])
    //       .range([height, 0]);
    //
    //     // Create bars
    //     svg.selectAll('.bar')
    //       .data(validAggregatedData)
    //       .enter()
    //       .append('rect')
    //       .attr('class', 'bar')
    //       .attr('x', d => xScale(d[0]))
    //       .attr('width', width / validAggregatedData.length)
    //       .attr('y', d => yScale(d[1]))
    //       .attr('height', d => height - yScale(d[1]));
    //
    //     // Create x and y axes
    //     svg.append('g')
    //       .attr('transform', `translate(0,${height})`)
    //       .call(d3.axisBottom(xScale));
    //
    //     svg.append('g')
    //       .call(d3.axisLeft(yScale));
    //   })
    //   .catch(error => console.error(error));
    // scatterplot
    const margin = {top: 20, right: 20, bottom: 40, left: 40};
    const width = 800 - margin.left - margin.right;
    const height = 400 - margin.top - margin.bottom;

    const svg = d3.select('#chart')
        .append('svg')
        .attr('width', width + margin.left + margin.right)
        .attr('height', height + margin.top + margin.bottom)
        .append('g')
        .attr('transform', `translate(${margin.left},${margin.top})`);

    // Make an AJAX call to retrieve data
    fetch('/api/orders')
        .then(response => response.json())
        .then(data => {
            // Filter out entries with invalid totalPrice or dates
            const validData = data.filter(d =>
                typeof d.totalPrice === 'number' && !isNaN(d.totalPrice) && d.date !== null
            );

            // Group the valid data by year and month, ignoring the day
            const aggregatedData = d3.rollups(
                validData,
                group => d3.sum(group, d => d.totalPrice),
                d => {
                    if (d.date) {
                        const date = new Date(d.date);
                        date.setDate(1); // Set day to 1 to ignore day in aggregation
                        return date;
                    }
                    return null; // Handle cases where date is missing
                }
            ).filter(([date]) => date !== null); // Filter out null dates

            // Filter out NaN and non-numeric aggregated values
            const validAggregatedData = aggregatedData.filter(d => !isNaN(d[1]));

            // Create scales for x and y axes
            const xScale = d3.scaleTime()
                .domain(d3.extent(validAggregatedData, d => d[0]))
                .range([0, width]);

            const yMaxValue = d3.max(validAggregatedData, d => d[1]);
            const yScale = d3.scaleLinear()
                .domain([0, yMaxValue])
                .range([height, 0]);

            // Create scatter plot dots
            svg.selectAll('.dot')
                .data(validAggregatedData)
                .enter()
                .append('circle')
                .attr('class', 'dot')
                .attr('cx', d => xScale(d[0]))
                .attr('cy', d => yScale(d[1]))
                .attr('r', 5); // Radius of the dots

            // Create x and y axes
            svg.append('g')
                .attr('transform', `translate(0,${height})`)
                .call(d3.axisBottom(xScale));

            svg.append('g')
                .call(d3.axisLeft(yScale));
        })
        .catch(error => console.error(error));

</script>
<%- include('partials/footer') %>
</body>

</html>